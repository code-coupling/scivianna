# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-22.04, ubuntu-24.04]
        python-version: ["3.10", "3.11", "3.12"]
        deps: ["default", "pyvista", "agent", "pyvista,agent"]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install .[${{ matrix.deps }}]
        python -m pip install medcoupling
        python -m pip install flake8 coverage pytest-cov nbmake 
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Tests
      run: |
        # Set up Python and run initial tests
        coverage run -a --source=scivianna -m pytest tests --tb=short -W ignore::DeprecationWarning -m default

        # Split deps into array using PowerShell (Windows) or bash (Linux)
        # Use a script that works on both platforms
        if [ "$RUNNER_OS" = "Windows" ]; then
          # Windows: Use PowerShell to split the string
          TAGS=$(powershell -Command "$DEPS = '$DEPS'.Split(','); $DEPS -join ' '")
        else
          # Linux: Use bash
          IFS=',' read -ra TAGS <<< "$DEPS"
        fi

        # Loop through each tag and run pytest
        for tag in "${TAGS[@]}"; do
          echo "Running tests for tag: $tag"
          coverage run -a --source=scivianna -m pytest tests --tb=short -W ignore::DeprecationWarning -m "$tag"
        done

        # Generate coverage report after all runs
        coverage report
      shell: bash