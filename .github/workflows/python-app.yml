# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-22.04, ubuntu-24.04]
        python-version: ["3.10", "3.11", "3.12"]
        deps: ["default", "pyvista", "agent", "pyvista,agent"]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install .[${{ matrix.deps }}]
        python -m pip install medcoupling
        python -m pip install flake8 coverage pytest-cov nbmake 
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Tests
      run: |
        # Run default tests
        coverage run -a --source=scivianna -m pytest tests --tb=short -W ignore::DeprecationWarning -m default

        # Split deps string into array using PowerShell (works on Linux and Windows)
        $deps = "${{ matrix.deps }}"
        $tags = $deps -split ',' | ForEach-Object { $_.Trim() } | Where-Object { $_ -ne '' }

        # Run pytest for each tag
        foreach ($tag in $tags) {
          Write-Host "Running tests for tag: $tag"
          coverage run -a --source=scivianna -m pytest tests --tb=short -W ignore::DeprecationWarning -m $tag
          $exitCode = $LASTEXITCODE
          if ($exitCode -ne 0) { exit $exitCode }
        }

        # Generate coverage report
        coverage report
      shell: pwsh